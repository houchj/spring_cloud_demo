
#user  nobody;
worker_processes  1;

#开发环境
error_log  logs/error.log  debug;
#生产环境
#error_log  logs/error.log;


pid     logs/nginx.pid;


events {
  worker_connections  1024;
}


http {
  default_type 'text/html';
  charset utf-8;

  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
  '$status $body_bytes_sent "$http_referer" '
  '"$http_user_agent" "$http_x_forwarded_for"';

  access_log  logs/access_main.log  main;

  sendfile        on;
  #tcp_nopush     on;

  #keepalive_timeout  0;
  keepalive_timeout  65;

  #gzip  on;

  #指定缓存信息
  lua_shared_dict ngx_cache 128m;
  #保证只有一个线程去访问redis或是mysql-lock for cache
  lua_shared_dict cache_lock 100k;

  #定义存储IP黑名单的共享内存变量
  lua_shared_dict black_ip_list 1m;

  #lua扩展加载


  # for linux
  # lua_package_path "./?.lua;/vagrant/LuaDemoProject/src/?.lua;/vagrant/LuaDemoProject/vendor/ZeroBraneStudio/?/?.lua;/vagrant/LuaDemoProject/vendor/ZeroBraneStudio/?.lua;/usr/local/openresty/lualib/?.lua;;";
  #  lua_package_cpath "/usr/local/ZeroBraneStudio-1.80/bin/clibs/?.so;/usr/local/openresty/lualib/?.so;;";



  # for linux
  lua_package_path "./?.lua;/vagrant/LuaDemoProject/src/?/?.lua;/vagrant/LuaDemoProject/src/?.lua;/usr/local/openresty/lualib/?/?.lua;/usr/local/openresty/lualib/?.lua;;";
  lua_package_cpath "/usr/local/openresty/lualib/?/?.so;/usr/local/openresty/lualib/?.so;;";


  # for windows
  # lua_package_path "./?.lua;C:/dev/refer/LuaDemoProject/src/vendor/jwt/?.lua;C:/dev/refer/LuaDemoProject/src/?.lua;E:/tool/ZeroBraneStudio-1.80/lualibs/?/?.lua;E:/tool/ZeroBraneStudio-1.80/lualibs/?.lua;E:/tool/openresty-1.13.6.2-win32/lualib/?.lua;;";
  # lua_package_cpath "E:/tool/ZeroBraneStudio-1.80/bin/clibs/?.dll;E:/tool/openresty-1.13.6.2-win32/lualib/?.dll;;";


  # 初始化项目
  init_by_lua_file luaScript/initial/loading_config.lua;


  #调试模式（即关闭lua脚本缓存)
  lua_code_cache off;



  server {
    listen       8081 ;
    server_name  localhost;
    default_type 'text/html';
    charset utf-8;

    location /url {
      echo  "-uri= $uri"
      "-args= $args"
      "-request_uri=  $request_uri " ;
    }

  }


  server {
    listen       80 default;
    server_name  localhost;
    default_type 'text/html';
    charset utf-8;


    location / {
      echo "默认根路径匹配: /";
    }


    #测试lua是否可以执行
    location  /lua {
      content_by_lua 'ngx.say("Hello, Lua!")';
    }

    #redis CRUD 简单操作演示
    location /redis_demo {
      content_by_lua_file luaScript/redis/RedisDemo.lua;
    }


    location /pool_demo {
      content_by_lua_block {
        local redis = require "resty.redis"
        local config = require("luaScript.module.config.redis-config");

        --连接池大小
        local pool_size = config.pool_size;

        -- 最大的空闲时间, 单位：毫秒
        local pool_max_idle_time = config.pool_max_idle_time;

        local red = redis:new()

        local ok, err = red:connect(config.host_name, config.port)
        if not ok then
            ngx.say("failed to connect: ", err)
            return
        else
            ngx.say("succeed to connect redis", "<br>")
        end
        red: auth(config.password)

        -- red: set_keepalive(pool_max_idle_time, pool_size)    -- ① 坑

        ok, err = red:set("dog", "an animal")
        if not ok then
            -- red: set_keepalive(pool_max_idle_time, pool_size)   -- ② 坑
            return
        end

        -- ③ 正确回收
        red: set_keepalive(pool_max_idle_time, pool_size)
        ngx.say("succeed to collect redis connection", "<br>")
      }
    }



    #点击次数统计的演示
    location /visitcount {
        #定义一个 Nginx 变量，用于在 Lua 脚本中保存访问次数
        set $count 0;
        access_by_lua_file luaScript/redis/RedisVisitCount.lua;
        echo "10s 内总的访问次数为: "  $count;
    }

    #首先从缓存查询商品，未命中在回源到 Java 后台
    location = /good/detail {
      content_by_lua_block {
        local goodId=ngx.var.arg_goodid;

        -- 判断 goodId 参数是否存在
        if not goodId then
           ngx.say("请输入 goodId");
           return;
        end

        -- 首先从缓存根据 id 查询商品
        local RedisCacheDemo = require "luaScript.redis.RedisCacheDemo";
        local redisCacheDemo = RedisCacheDemo:new();
        local json = redisCacheDemo:getCache(goodId);

        -- 判断缓存是否被命中
        if not json then
            ngx.say("缓存是否被命中，回源到上游接口<br>");
             --没有命中缓存，则回源到上游接口
            json = redisCacheDemo:goUpstream();
        else
            ngx.say("缓存已经被命中<br>");
        end
        ngx.say("商品信息：",json);
      }
    }

    #模拟Java后台接口，查询商品，然后设置缓存
    location = /java/good/detail {
      #指定规则为internal规则，防止外部请求命中此规则
      internal;
      content_by_lua_block {
        local RedisCacheDemo = require "luaScript.redis.RedisCacheDemo";

        -- Java 后台将从数据库查找商品, 这里省略....
        local json='{goodId:商品id,goodName:商品名称}';

        -- 将商品缓存到 Redis
        local redisCacheDemo = RedisCacheDemo:new();
        redisCacheDemo:setCache(ngx.var.arg_goodid,json);

        -- 返回商品到下游网关
        ngx.say(json);

      }
    }



    location /black_ip_demo {
      access_by_lua_file luaScript/redis/black_ip_filter.lua;
      echo "恭喜，没有被拦截";
    }
  }

}