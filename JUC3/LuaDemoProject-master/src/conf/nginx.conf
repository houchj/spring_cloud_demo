
#user  nobody;
worker_processes  1;
#开发环境
error_log  /vagrant/LuaDemoProject/src/logs/error.log debug;
#生产环境
#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
  use epoll;
  worker_connections 204800;
  #worker_connections  1024;
}


http {
  include mime.types;
  default_type  application/octet-stream;

  #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
  #                  '$status $body_bytes_sent "$http_referer" '
  #                  '"$http_user_agent" "$http_x_forwarded_for"';

  #access_log  logs/access.log  main;
  access_log   /vagrant/LuaDemoProject/src/logs/access.log;

  sendfile        on;
  #tcp_nopush     on;


  map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
  }

  #keepalive_timeout  0;
  keepalive_timeout  60s;
  keepalive_requests 10000;

  # for linux
  lua_package_path "/vagrant/LuaDemoProject/src/?.lua;/usr/local/ZeroBraneStudio-1.80/?/?.lua;/usr/local/ZeroBraneStudio-1.80/?.lua;;";
  lua_package_cpath "/usr/local/ZeroBraneStudio-1.80/bin/clibs/?.so;;";
  #lua_package_path "/vagrant/LuaDemoProject/src/?.lua;/vagrant/LuaDemoProject/vendor/jwt/?.lua;/usr/local/ZeroBraneStudio-1.80/?/?.lua;/usr/local/ZeroBraneStudio-1.80/?.lua;/usr/local/openresty/lualib/?.lua;;";
  #lua_package_cpath "/usr/local/ZeroBraneStudio-1.80/bin/clibs/?.so;/usr/local/openresty/lualib/?.so;;";


  #gzip  on;
  #zuul cluster
  upstream zuul {
    #	  server 192.168.233.1:7799;
    server 192.168.56.121: 7799;
    keepalive 1000;
  }

  server {
    listen       80;
    server_name  admin.crazydemo.com;
    location / {
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forward-For $proxy_add_x_forwarded_for;
      proxy_set_header Host $http_host;
      proxy_set_header backend  'true'; # 给后台的请求加上自定义头，方便session区分
      proxy_set_header X-Nginx-Proxy true;
      proxy_pass http://zuul;
    }
    location  ^~ /admin/ {
      proxy_pass http://192.168.233.1:8066/ ;
    }
  }

  server {
    listen       80;
    server_name  *.crazydemo.com;
    #charset koi8-r;

    #access_log  logs/host.access.log  main;

    # location / {
    #    root   html;
    #     index  index.html index.htm;
    #}

    location / {
      proxy_pass http://zuul;
      #proxy_http_version 1.1;
      #proxy_set_header Connection "";
        proxy_connect_timeout 15;
      proxy_read_timeout 60s;
      proxy_send_timeout 12s;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $connection_upgrade;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
      root   html;
    }

    location = /hello {
      default_type text/html;
      content_by_lua_block {
        ngx.say("Hello Openresty.")
      }
    }

    location = /test {
      default_type 'text/html';
      charset utf-8;
      content_by_lua_file /vagrant/LuaDemoProject/src/luaScript/test.lua;
    }
    #第一个lua脚本 hellword
    location = /helloworld {
      default_type 'text/html';
      charset utf-8;
      content_by_lua_file /vagrant/LuaDemoProject/src/luaScript/module/demo/helloworld.lua;
    }

    location = /verify {
      default_type 'text/html';
      charset utf-8;
      content_by_lua '
      local cjson = require "cjson"
      local jwt = require "resty.jwt"

      local jwt_token = "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9" ..
      ".eyJmb28iOiJiYXIifQ" ..
      ".VAoRL1IU0nOguxURF2ZcKR0SGKE1gCbqwyh8u2MLAyY"
      local jwt_obj = jwt:verify("lua-resty-jwt", jwt_token)
      ngx.say(cjson.encode(jwt_obj))
      ';
    }
    location = /sign {
      default_type 'text/html';
      charset utf-8;
      content_by_lua '
      local cjson = require "cjson"
      local jwt = require "resty.jwt"

      local jwt_token = jwt:sign(
      "lua-resty-jwt",
    { header = {typ = "JWT", alg = "HS256"}, payload = {foo = "bar"}
    } )
    ngx.say(jwt_token)
    ';
  }

  # proxy the PHP scripts to Apache listening on 127.0.0.1:80
  #
  #location ~ \.php$ {
  #    proxy_pass   http://127.0.0.1;
  #}

  # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
  #
  #location ~ \.php$ {
  #    root           html;
  #    fastcgi_pass   127.0.0.1:9000;
  #    fastcgi_index  index.php;
  #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
  #    include        fastcgi_params;
  #}

  # deny access to .htaccess files, if Apache's document root
  # concurs with nginx's one
  #
  #location ~ /\.ht {
  #    deny  all;
  #}
}


# another virtual host using mix of IP-, name-, and port-based configuration
#
#server {
#    listen       8000;
#    listen       somename:8080;
#    server_name  somename  alias  another.alias;

#    location / {
#        root   html;
#        index  index.html index.htm;
#    }
#}


# HTTPS server
#
#server {
#    listen       443 ssl;
#    server_name  localhost;

#    ssl_certificate      cert.pem;
#    ssl_certificate_key  cert.key;

#    ssl_session_cache    shared:SSL:1m;
#    ssl_session_timeout  5m;

#    ssl_ciphers  HIGH:!aNULL:!MD5;
#    ssl_prefer_server_ciphers  on;

#    location / {
#        root   html;
#        index  index.html index.htm;
#    }
#}

}
