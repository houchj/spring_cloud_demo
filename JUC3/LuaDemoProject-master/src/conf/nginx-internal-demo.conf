
#user  nobody;
worker_processes  1;

#开发环境
error_log  logs/error.log  debug;
#生产环境
#error_log  logs/error.log;


pid     logs/nginx.pid;


events {
  worker_connections  1024;
}


http {
  default_type 'text/html';
  charset utf-8;

  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
  '$status $body_bytes_sent "$http_referer" '
  '"$http_user_agent" "$http_x_forwarded_for"';

  access_log  logs/access_main.log  main;

  sendfile        on;
  #tcp_nopush     on;

  #keepalive_timeout  0;
  keepalive_timeout  65;

  #gzip  on;

  #指定缓存信息
  lua_shared_dict ngx_cache 128m;
  #保证只有一个线程去访问redis或是mysql-lock for cache
  lua_shared_dict cache_lock 100k;
  #lua扩展加载

  # for linux
  # lua_package_path "/usr/local/openresty/lualib/?.lua;;";
  # lua_package_cpath "/usr/local/openresty/lualib/?.so;;";


  # for windows
  lua_package_path "./?.lua;C:/dev/refer/LuaDemoProject/src/vendor/jwt/?.lua;C:/dev/refer/LuaDemoProject/src/?.lua;E:/tool/ZeroBraneStudio-1.80/lualibs/?/?.lua;E:/tool/ZeroBraneStudio-1.80/lualibs/?.lua;E:/tool/openresty-1.13.6.2-win32/lualib/?.lua;;";
  lua_package_cpath "E:/tool/ZeroBraneStudio-1.80/bin/clibs/?.dll;E:/tool/openresty-1.13.6.2-win32/lualib/?.dll;;";


  # 初始化项目
  init_by_lua_file luaScript/initial/loading_config.lua;


  #调试模式（即关闭lua脚本缓存)
  lua_code_cache off;

  server {
    listen       8081 ;
    server_name  localhost;
    default_type 'text/html';
    charset utf-8;

    location /url {
      echo  "-uri= $uri"
      "-args= $args"
      "-request_uri=  $request_uri " ;
    }

  }


  server {
    listen       80 default;
    server_name  localhost;
    default_type 'text/html';
    charset utf-8;


    location / {
      echo "默认根路径匹配: /";
    }





      #内部请求
      location ~ /internal/detail/([0-9]+) {
        internal;
        # 将捕获组 1 的值放到  $goodsId
        set $goodsId $1;
        content_by_lua_block {
          ngx.req.read_body();
          local args = ngx.req.get_uri_args()
          local data = ngx.req.get_body_data()
          ngx.say("  goodsId =", ngx.var.goodsId);
          ngx.say(", <br>foo =", args.foo);
          ngx.say(", <br>data =", data);
          ngx.say(", <br>var.var1 =", ngx.var.var1);
          ngx.say(", <br>ngx.ctx.c1 =", ngx.ctx.c1);
          ngx.ctx.c1 = "changed value";
        }
      }

      #向外公开的请求
      location ~ /goods/detail/([0-9]+) {
        set $goodsId $1; #将location的正则捕获组1，赋值到变量 $goodsId
        set $var1 '';
        set $var2 '';
        content_by_lua_block {
          -- 解析 body 参数之前一定要先读取request body
          ngx.req.read_body();
          -- 组装 uri
          local uri = "/internal/detail/".. ngx.var.goodsId;

          local request_method = ngx.var.request_method;
          -- 获取参数的值
          local args = ngx.req.get_uri_args();

          local shareCtx = {c1 = "v1", other = "other value"}

          local res = ngx.location.capture(uri,{
              method = ngx.HTTP_GET,
              args = args, --转发父请求的参数
              body = 'customed  request body',
              vars = {var1 = "value1", var2 = "value2"},
              always_forward_body = true, -- 转发父请求的 request body
              ctx = shareCtx,
        });
        ngx.say(" child  res.status :", res.status);
        ngx.say(" <br><br>child  res.body :", res.body);
        ngx.say(", <br><br>shareCtx.c1 =", shareCtx.c1);

      }
    }


  #模拟上游接口一：输出get请求的参数
  location /print_get_param {
    internal;
    content_by_lua_block {
      local arg = ngx.req.get_uri_args()
      for k, v in pairs(arg) do
        ngx.say("<br>[GET ] key:", k, " v:", v)
      end
    }
  }

  #模拟上游接口二：输出post请求的参数
  location /print_post_param {
    internal;
    content_by_lua_block {
      ngx.req.read_body() -- 解析 body 参数之前一定要先读取 body
      local arg = ngx.req.get_post_args();
      for k, v in pairs(arg) do
        ngx.say("<br>[POST] key:", k, " v:", v)
      end
    }
  }

  #发起两个子请求，一个get，一个post
  location /capture_multi_demo {
     content_by_lua '
        local  postBody = ngx.encode_args({post_k1 = 32, post_k2 = "post_v2"});
        local reqs = {};
        table.insert(reqs, { "/print_get_param", { args = "a=3&b=4"   }});
        table.insert(reqs, { "/print_post_param",{ method = ngx.HTTP_POST, body = postBody}});
        -- 统一发请求，然后等待结果
        local resps = {ngx.location.capture_multi(reqs)};

        -- 迭代结果列表
        for i, res in ipairs(resps) do
          ngx.say(" child res.status :", res.status,"<br>");
          ngx.say(" child  res.body :", res.body,"<br><br>");
        end
     ';
  }



 }

}
