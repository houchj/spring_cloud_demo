
#user  nobody;
worker_processes  1;

#开发环境
error_log  logs/error.log  debug;
#生产环境
#error_log  logs/error.log;


pid     logs/nginx.pid;


events {
  worker_connections  1024;
}


http {
  default_type  application/octet-stream;

  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
  '$status $body_bytes_sent "$http_referer" '
  '"$http_user_agent" "$http_x_forwarded_for"';

  access_log  logs/access_main.log  main;

  sendfile        on;
  #tcp_nopush     on;

  #keepalive_timeout  0;
  keepalive_timeout  65;

  #gzip  on;

  #gzip  on;
  gzip on;
  #gzip最小长度 一般设置成1K就行，小于1K的就不压缩了 不然会越压越大
  gzip_min_length 1024;
  #gzip压缩比，1 压缩比最小处理速度最快，9 压缩比最大但处理最慢（传输快但比较消耗cpu）。
  gzip_comp_level 1;
  #匹配MIME类型进行压缩
  gzip_types text/plain application/json application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png application/vnd.ms-fontobject font/ttf font/opentype font/x-woff image/svg+xml  font/woff;
  gzip_vary on;
  gzip_disable "MSIE [1-6].(?!.*SV1)"; #ie6不支持gzip，需要禁用掉ie6
  #设置系统获取几个单位的缓存用于存储gzip的压缩结 果数据流。 例如 4 4k 代表以4k为单位，按照原始数据大小以4k为单位的4倍申请内存。 4 8k 代表以8k为单位，按照原始数据大小以8k为单位的4倍申请内存。
  #如果没有设置，默认值是申请跟原始数据相同大小的内存空间去存储gzip压缩结果。
  gzip_buffers 4 8k;
  #gzip默认最低支持1.1现在改成最低支持1.0 近代浏览器基本不设置
  gzip_http_version 1.0;
  #Nginx作为反向代理的时候启用，开启或者关闭后端服务器返回的结果，匹配的前提是后端服务器必须要返回包含"Via"的 header头。
  #off - 关闭所有的代理结果数据的压缩
  #expired - 启用压缩，如果header头中包含 "Expires" 头信息
  #no-cache - 启用压缩，如果header头中包含 "Cache-Control:no-cache" 头信息
  #no-store - 启用压缩，如果header头中包含 "Cache-Control:no-store" 头信息
  #private - 启用压缩，如果header头中包含 "Cache-Control:private" 头信息
  #no_last_modified - 启用压缩,如果header头中不包含 "Last-Modified" 头信息
  #no_etag - 启用压缩 ,如果header头中不包含 "ETag" 头信息
  #auth - 启用压缩 , 如果header头中包含 "Authorization" 头信息
  #any - 无条件启用压缩
  #gzip_proxied expired no-cache no-store private auth;
  gzip_proxied any;
  #指定缓存信息
  lua_shared_dict ngx_cache 128m;
  #保证只有一个线程去访问redis或是mysql-lock for cache
  lua_shared_dict cache_lock 100k;
  #lua扩展加载

  # for linux
  # lua_package_path "/usr/local/openresty/lualib/?.lua;;";
  # lua_package_cpath "/usr/local/openresty/lualib/?.so;;";


  # for windows
 lua_package_path "C:/dev/refer/LuaDemoProject/src/vendor/jwt/?.lua;C:/dev/refer/LuaDemoProject/src/?.lua;E:/tool/ZeroBraneStudio-1.80/lualibs/?/?.lua;E:/tool/ZeroBraneStudio-1.80/lualibs/?.lua;E:/tool/openresty-1.13.6.2-win32/lualib/?.lua;;";
 lua_package_cpath "E:/tool/ZeroBraneStudio-1.80/bin/clibs/?.dll;E:/tool/openresty-1.13.6.2-win32/lualib/?.dll;;";


  # 初始化项目
  init_by_lua_file luaScript/initial/loading_config.lua;

  #调试模式（即关闭lua脚本缓存)
  lua_code_cache off;

  upstream zuul {
    server  192.168.56.121:9073;
  }


  server {
    listen       80;
    server_name  localhost;
    default_type 'text/html';
    charset utf-8;

    location / {
      root   html;
      index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
      root   html;
    }

    #第一个lua脚本 hellword
    location /rest/merge {

      content_by_lua_file luaScript/module/rest/merge.lua;
    }

    location ^~ /gemp-user {
      proxy_pass http://10.3.19.30:8868;
    }

    location ^~ /gemp-admin {
      proxy_pass http://10.3.19.30:8868;
    }

  }


}
